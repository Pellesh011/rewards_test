
volumes:
  postgres-vol:
    driver: local

networks:
  postgres-net:
    driver: bridge
services:

  app:
    image: django:latest
    build:
      context: .
      dockerfile: Dockerfile
    command: bash -c "export DOCKER_ENV=1; python manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env.docker
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - DOCKER_ENV=1
    depends_on:
      - db
  redis:
    image: "redis:alpine"
    expose:
      - 6379
    ports:
      - "6379:6379"

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: bash -c "export DOCKER_ENV=1;  python -m celery -A rewardsapp worker --loglevel=info"
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
  db:
    image: postgres:16.1-alpine
    environment:
      - PGPORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-vol:/var/lib/postgresql/data
    expose:
      - ${POSTGRES_PORT}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    entrypoint: |
      bash -c "
        if [ ! -d /var/lib/postgresql/data/pgdata/base ]; then
          /usr/local/bin/docker-entrypoint.sh initdb
          /usr/local/bin/docker-entrypoint.sh postgres
          psql -U postgres -d $POSTGRES_DB -c \"CREATE USER IF NOT EXISTS {POSTGRES_USER} WITH PASSWORD '{POSTGRES_PASSWORD}';\"
        else
          /usr/local/bin/docker-entrypoint.sh postgres
        fi
      "